#!/bin/bash

# Bash Color
green='\033[01;32m'
red='\033[01;31m'
blink_red='\033[05;31m'
restore='\033[0m'

#################################################################################
#########                       edit option                             #########
#################################################################################
KERNEL_DIR=$PWD
IMAGE_NAME=boot

# set kernel version
KERNEL_NAME="z2_dev"
TARGET_DEVICE=z2

# set build user and host
export KBUILD_BUILD_USER="lawn"
export KBUILD_BUILD_HOST="z2_dev"

# get version from config
# (Do not edit)
GETVER=$(cat "$KERNEL_DIR/version")
KERNEL_VERSION=`grep '^VERSION = ' ./Makefile | cut -d' ' -f3`
KERNEL_PATCHLEVEL=`grep '^PATCHLEVEL = ' ./Makefile | cut -d' ' -f3`
KERNEL_SUBLEVEL=`grep '^SUBLEVEL = ' ./Makefile | cut -d' ' -f3`
export BUILD_KERNELVERSION="$KERNEL_VERSION.$KERNEL_PATCHLEVEL.$KERNEL_SUBLEVEL"
export BUILD_LOCALVERSION="$BUILD_KERNELVERSION-$KERNEL_NAME-$TARGET_DEVICE-$GETVER"

# set build env
export ARCH=arm64
BUILD_CROSS_COMPILE=aarch64-linux-android-7.x
export TOOLCHAIN_PATH="$PWD/../../../prebuilts/gcc/darwin-x86/aarch64/$BUILD_CROSS_COMPILE"
export CROSS_COMPILE=$TOOLCHAIN_PATH/bin/aarch64-linux-android-
export LOCALVERSION="-$BUILD_LOCALVERSION"
THREAD="-j$(grep -c ^processor /proc/cpuinfo)"

# set kernel option
KERNEL_CMDLINE="androidboot.hardware=qcom ehci-hcd.park=3 lpm_levels.sleep_disabled=1 cma=16M@0-0xffffffff"
KERNEL_BASEADDRESS=0x80000000
KERNEL_RAMDISK_OFFSET=0x01000000
KERNEL_TAGS_OFFSET=0x00000100
KERNEL_PAGESIZE=4096

# set defconfig
KERNEL_DEFCONFIG=z2_defconfig

# ramdisk path
RAMDISK_SRC_DIR=../z2_boot_ramdisk
RAMDISK_TMP_DIR=/tmp/z2_boot_ramdisk

# anykernel path
ANYKERNEL_DIR="AnyKernel2"
ZIP_MOVE="$KERNEL_DIR/$BIN_DIR"

# working folder
# (Do not edit)
BIN_DIR=out/$TARGET_DEVICE/bin
OBJ_DIR=out/$TARGET_DEVICE/obj
mkdir -p $BIN_DIR
mkdir -p ${OBJ_DIR}

#################################################################################
#########                       end option                              #########
#################################################################################


#################################################################################
#########                       internal functions                      #########
#################################################################################

check_GCC()
{
if [ ! -d $TOOLCHAIN_PATH ]; then
   echo "error: not found GCC"
   echo "You need set $TOOLCHAIN_PATH"
   echo "https://github.com/nathanchance/build-tools-gcc"
   exit -1
fi
}

copy_ramdisk()
{
if [ -d $RAMDISK_SRC_DIR ]; then
    echo -e "${green}"
    echo ""
    echo "=====> COPY RAMDISK"
    echo -e "${restore}"
    echo copy $RAMDISK_SRC_DIR to $(dirname $RAMDISK_TMP_DIR)

    if [ -d $RAMDISK_TMP_DIR ]; then
        rm -rf $RAMDISK_TMP_DIR
    fi
    cp -a $RAMDISK_SRC_DIR $(dirname $RAMDISK_TMP_DIR)
    rm -rf $RAMDISK_TMP_DIR/.git
    find $RAMDISK_TMP_DIR -name .gitkeep | xargs rm --force
    find $RAMDISK_TMP_DIR -name .gitignore | xargs rm --force
fi
}

clean_up()
{
   # force regeneration of .dtb and Image files for every compile
    rm -f $OBJ_DIR/arch/arm64/boot/Image
    rm -f $OBJ_DIR/arch/arm64/boot/Image.gz
    rm -f $OBJ_DIR/arch/arm64/boot/Image.gz-dtb
    rm -f $BIN_DIR/*.zip
    rm -f $BIN_DIR/*.img
}

compile()
{

if [ "$BUILD_SELECT" = 'all' -o "$BUILD_SELECT" = 'a' ]; then
    echo -e "${red}"
    echo ""
    echo "=====> CLEANING..."
    make clean
    echo "=====> GENERATE DEFCONFIG..."
    echo -e "${restore}"
    cp -f ./arch/arm64/configs/$KERNEL_DEFCONFIG $OBJ_DIR/.config
    make -C $PWD O=$OBJ_DIR oldconfig || exit -1
fi

if [ "$BUILD_SELECT" != 'image' -a "$BUILD_SELECT" != 'i' ]; then
    echo -e "${green}"
    echo ""
    echo "=====> BUILDING..."
    echo -e "${restore}"
    if [ -e make.log ]; then
      mv make.log make_old.log
    fi
    nice -n 10 make O=${OBJ_DIR} $THREAD 2>&1 | tee make.log || exit -1
fi
echo -e "${green}"
echo ""
echo "=====> CREATE RELEASE IMAGE"
echo -e "${restore}"
}

check_compile_error()
{
   COMPILE_ERROR=`grep 'error:' ./make.log`
   if [ "$COMPILE_ERROR" ]; then
      echo -e "${red}"
      echo ""
      echo "=====> ERROR"
      echo -e "${restore}"
      grep 'error:' ./make.log
      exit -1
    fi
}

clean_release_dir()
{
if [ `find $BIN_DIR -type f | wc -l` -gt 0 ]; then
  rm -rf $BIN_DIR/*
fi
mkdir -p $BIN_DIR
}

module_stock()
{
if [ -d $ANYKERNEL_DIR ]; then
rm -rf $ANYKERNEL_DIR/modules/
mkdir $ANYKERNEL_DIR/modules
find $OBJ_DIR -name '*.ko' -exec cp -av {} $ANYKERNEL_DIR/modules/ \;
fi
if [ -d $RAMDISK_SRC_DIR ]; then
　　　　mkdir $BIN_DIR/modules
　　　　find $OBJ_DIR -name '*.ko' -exec cp -av {} $BIN_DIR/modules/ \;
fi

    # strip modules
if [ -d $ANYKERNEL_DIR ]; then
   ${TOOL_CHAIN_PATH}/${CROSS_COMPILE}strip --strip-unneeded $ANYKERNEL_DIR/modules/*
fi
if [ -d $RAMDISK_SRC_DIR ]; then
   ${TOOL_CHAIN_PATH}/${CROSS_COMPILE}strip --strip-unneeded $BIN_DIR/modules/*
fi
}

zip_anykernel()
{
if [ -d $ANYKERNEL_DIR ]; then
    cp -rf $OBJ_DIR/arch/arm64/boot/Image.gz-dtb $ANYKERNEL_DIR/zImage
    cd $ANYKERNEL_DIR
    zip -r9 `echo $BUILD_LOCALVERSION`.zip *
    mv `echo $BUILD_LOCALVERSION`.zip $ZIP_MOVE
    find . -name "*.zip" -type f
    find . -name "*.zip" -type f -delete
    cd $KERNEL_DIR
fi
}

make_boot_image()
{
if [ -d $RAMDISK_SRC_DIR ]; then
　　　　echo -e "${green}"
　　　　echo ""
　　　　echo "=== make_boot_image ==="
　　　　echo -e "${restore}"

    ./release-tools/mkbootfs ${RAMDISK_TMP_DIR} > ${BIN_DIR}/ramdisk-${IMAGE_NAME}.cpio
    ./release-tools/minigzip < ${BIN_DIR}/ramdisk-${IMAGE_NAME}.cpio > ${BIN_DIR}/ramdisk-${IMAGE_NAME}.img
#   lzma < ${BIN_DIR}/ramdisk-${IMAGE_NAME}.cpio > ${BIN_DIR}/ramdisk-${IMAGE_NAME}.img
    ./release-tools/mkbootimg \
    --cmdline "${KERNEL_CMDLINE}" \
    --base ${KERNEL_BASEADDRESS} \
    --pagesize ${KERNEL_PAGESIZE} \
    --ramdisk_offset ${KERNEL_RAMDISK_OFFSET} \
    --tags_offset ${KERNEL_TAGS_OFFSET} \
    --kernel ${OBJ_DIR}/arch/arm64/boot/Image.gz-dtb \
    --ramdisk ${BIN_DIR}/ramdisk-${IMAGE_NAME}.img \
    --output ${BIN_DIR}/${IMAGE_NAME}.img
    rm $BIN_DIR/ramdisk-$IMAGE_NAME.img
    rm $BIN_DIR/ramdisk-$IMAGE_NAME.cpio
    rm -r ${RAMDISK_TMP_DIR}
fi
}

make_boot_zip()
{
if [ -d $RAMDISK_SRC_DIR ]; then
　　　　echo -e "${green}"
　　　　echo ""
　　　　echo "=== make_zip ==="
　　　　echo -e "${restore}"
    echo "  $BIN_DIR/$IMAGE_NAME.img"
    cd $BIN_DIR
    if [ -d tmp ]; then
        rm -rf tmp
    fi
    mkdir -p ./tmp/META-INF/com/google/android
    cp $IMAGE_NAME.img ./tmp/
    cp $KERNEL_DIR/release-tools/update-binary ./tmp/META-INF/com/google/android/
    sed -e "s/@VERSION/$BUILD_LOCALVERSION/g" $KERNEL_DIR/release-tools/$TARGET_DEVICE/updater-script-$IMAGE_NAME.sed > ./tmp/META-INF/com/google/android/updater-script
    cd tmp && zip -rq ../cwm.zip ./* && cd ../
    SIGNAPK_DIR=$KERNEL_DIR/release-tools/signapk
    java -jar $SIGNAPK_DIR/signapk.jar -w $SIGNAPK_DIR/testkey.x509.pem $SIGNAPK_DIR/testkey.pk8 cwm.zip $BUILD_LOCALVERSION.zip
    rm cwm.zip
    rm -rf tmp
　　　　echo "$BIN_DIR/$BUILD_LOCALVERSION.zip"
fi
}

#################################################################################
#########                       end function                            #########
#################################################################################

DATE_START=$(date +"%s")

echo ""
echo "====================================================================="
echo "    BUILD START (KERNEL VERSION $BUILD_LOCALVERSION)"
echo "    toolchain: ${BUILD_CROSS_COMPILE}"
echo "====================================================================="
if [ ! -n "$1" ]; then
    echo ""
    read -p "select build? [(a)ll/(u)pdate/(i)mage default:update] " BUILD_SELECT
else
    BUILD_SELECT=$1
fi
check_GCC
copy_ramdisk
clean_up
compile
check_compile_error
clean_release_dir
module_stock
zip_anykernel
make_boot_image
make_boot_zip
cd $KERNEL_DIR
echo ""
echo -e "${green}"
echo "====================================================================="
echo "    BUILD COMPLETED"
if [ -d $ANYKERNEL_DIR ]; then
echo "    $BIN_DIR/$BUILD_LOCALVERSION.zip"
fi
if [ -d $RAMDISK_SRC_DIR ]; then
echo "    $BIN_DIR/$BUILD_LOCALVERSION.zip"
fi
echo "====================================================================="
echo -e "${restore}"
echo ""

DATE_END=$(date +"%s")
DIFF=$(($DATE_END - $DATE_START))
echo "Time: $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds."
echo
exit 0
